#!/bin/sh

set -u
set -e

source "./.env"

# Output colors
NORMAL="\\033[0;39m"
RED="\\033[1;31m"
BLUE="\\033[1;34m"

help() {    
    echo "-----------------------------------------------------------------------"
    echo " ${HOSTNAME} | Available commands                                     -"
    echo "-----------------------------------------------------------------------"
    echo "$BLUE"    
    echo "   > ./bin/do bash - Starts a bash in the php container"
    echo "   > ./bin/do flow <your command> - Executes a flow command in the php container"
    echo "   > ./bin/do composer <your command> - Executes a composer command"
    echo "   > ./bin/do mysql <your command> - Executes a mysql command in the php container"
    echo "   > ./bin/do start - Start the development environment"
    echo "   > ./bin/do stop - Stop the development environment"
    echo "   > ./bin/do status - Overview over the development environment"
    echo "   > ./bin/do restart - Restart the development environment"
    echo "   > ./bin/do upgrade - Upgrade the development environment"
    echo "   > ./bin/do help - Command overview"
    echo "$NORMAL"
    echo "-----------------------------------------------------------------------"
}

log() {
    echo "${HOSTNAME} | $BLUE > $1 $NORMAL"
}

bash() {
    log "Starting bash in php container"
    docker-compose exec --user=1000:33 php /bin/bash
}

flow() {
    log "Execute flow commands"
    docker-compose exec --user=1000:33 php php flow $@
}

composer() {
    log "Execute composer command"
    docker-compose run --rm composer $@
}

mysql() {
    log "Execute mysql commands"
    docker-compose exec mysql mysql -u$MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE $@
}

#mysqldump() {
    # docker-compose exec db mysqldump -u$MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE $@
#}

#mysqlimport() {
    # docker exec -i $(docker-compose ps | grep _db_ | awk '{print $1}') mysql -u$MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE
#}

upgrade() {
    log "Upgrade development environment"
    while true; do
    read -p "Do you really want to upgrade your development environment?" yn
    case $yn in
        [Yy]* ) stop; pull; start; break;;
        [Nn]* ) exit;;
        * ) echo "Please answer yes or no. Choose wisely ;)" ;;
    esac
done
}

pull() {
    log "Pull latest docker images"
    docker-compose pull
}

start() {
    log "Start development environment"
    docker-compose up -d
}

stop() {
    log "Stop development environment"
    docker-compose down $@
}

status() {
    log "Status for the development environment"
    docker-compose ps $@
}

restart() {
    log "Restart development environment"
    stop
    start
}

$*